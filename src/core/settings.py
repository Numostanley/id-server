"""
Django settings for id_server project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from dotenv import dotenv_values, load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
# locate .env.base file
BASE_ENV_PATH = BASE_DIR / '.env/base/.env'

# load the environment variables in .env/base/.env
base_env_config = dotenv_values(dotenv_path=BASE_ENV_PATH)

# if ENVIRONMENT is set to 'prod' in the .env.base file load the
# production environment variable ('.env/prod/.env') else
# load the development environment variables ('.env/dev/.env')

ENVIRONMENT = base_env_config['ENVIRONMENT']

if ENVIRONMENT == 'prod':
    ENV_FILE_PATH = BASE_DIR / '.env/prod/.env'
else:
    ENV_FILE_PATH = BASE_DIR / '.env/dev/.env'

# load environment variables for the specified
# environment (either `.env/prod/.env` or `.env/dev/.env`)
env_config = dotenv_values(dotenv_path=ENV_FILE_PATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--=mqvpq+4zs8d6v%^tx==!i5%z#^29p8=(s&n0tho$a0v6v9rj'

# SECURITY WARNING: don't run with debug turned on in production!

if ENVIRONMENT == 'dev':
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_extensions",
    "rest_framework",
    "drf_yasg",
    "corsheaders",
    "apis.clients",
    "apis.main",
    "apis.users"
]

AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'apis/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'id-server',
        'USER': 'numo',
        'PASSWORD': env_config['DB_PASSWORD'],
        'HOST': 'database',
        'PORT': 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.ScryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = BASE_DIR / 'apis/staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'apis/static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

TOKEN_EXPIRY_TIME = int(env_config['TOKEN_EXPIRY_TIME'])

REST_CONFIG = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # Disable Browsable REST API Form
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'apis.clients.authentication.ClientBasicAuthentication'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '5/minute',
        'user': '10/minute'
    }
}

CORS_ALLOWED_ORIGINS = []
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = False

# Signing Key for JWT Access Token
SIGNING_KEY = Path(f'{BASE_DIR}/oidc.key').read_text()

PUBLIC_SIGNING_KEY = Path(f'{BASE_DIR}/oidc.pub').read_text()

SIGNING_ALGORITHM = env_config['SIGNING_ALGORITHM']

# Clients
# from apis.clients.models import Client

CLIENTS = '[client.client_id for client in Client.get_all_clients()]'
